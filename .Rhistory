rsconnect::deployApp(".")
runApp()
runApp()
rsconnect::deployApp(".")
library(VGAM)
library(rjags)
library(R2jags)
quatprop<-function(){
for(i in 1:4){
r[i]~dbin(p[i],N)
}
# priors :
p[1]~dbeta(9,10) # prior pas trop fort
for(j in 2:4){p[j]~dbeta(alpha,beta) }  # pareil pas trop fort mais hyperprior quand même
alpha~dnorm(9.1,17777) # précision de la mort pour avoir un alpha puis un p entre 89,5 et 92,5
beta~dnorm(1.1,17777) # idem
diff21<-p[2]-p[1] # écart avec le placebo
diff31<-p[3]-p[1] # écart avec le placebo
diff41<-p[4]-p[1] # écart avec le placebo
diff21sup0<- step(diff21)
diff31sup0<- step(diff31)
diff41sup0<- step(diff41)
pglobal<-(p[2]+p[3]+p[4])/3
diffglobal1<-pglobal-p[1] # écart avec le placebo
diffglobal1sup0<- step(diffglobal1)
}
prmtr<-c("p","diff21","diff31","diff41","diff21sup0","diff31sup0","diff41sup0","diffglobal1sup0","pglobal")
# Data
simul=1000
res<-matrix(NA,ncol=4,nrow=simul)
N=450 # à faire varier pour trouver la "puissance"
for(i in 1:simul){
cat("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","\n")
cat("Simulation N° ",i,"\n")
cat("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","\n")
r<-c(sum(rbetabinom.ab(N,1,85,15)),
sum(rbetabinom.ab(N,1,90,10)),
sum(rbetabinom.ab(N,1,91,9)),
sum(rbetabinom.ab(N,1,92,8)))
# inits
valin<-function(){list("p"=rep(0.9,4))}
jfit<-jags(data=list("r","N"),
inits=valin,
parameters.to.save = prmtr,
model.file=quatprop,
n.chains=1,
n.iter=55000,
n.burnin=5000,
n.thin=1,
DIC=TRUE,
working.directory=NULL,
jags.seed = 123,
refresh = 5000,
progress.bar = "none", digits=5
)
jfit$BUGSoutput$summary
aze<-jfit$BUGSoutput$summary[c(3,5,7,8),1]
res[i,]<-aze
}
sum(res[,1]>0.95)
sum(res[,2]>0.95)
sum(res[,3]>0.95)
sum(res[,4]>0.95)
simIt <- function(simul=1000, N=100 ){
res<-matrix(NA,ncol=4,nrow=simul)
#N=100 # à faire varier pour trouver la "puissance"
for(i in 1:simul){
# cat("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","\n")
# cat("Simulation N° ",i,"\n")
# cat("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","\n")
r<-c(sum(rbetabinom.ab(N,1,85,15)),
sum(rbetabinom.ab(N,1,90,10)),
sum(rbetabinom.ab(N,1,91,9)),
sum(rbetabinom.ab(N,1,92,8)))
# inits
valin<-function(){list("p"=rep(0.9,4))}
jfit<-jags(data=list("r","N"),
inits=valin,
parameters.to.save = prmtr,
model.file=quatprop,
n.chains=1,
n.iter=55000,
n.burnin=5000,
n.thin=1,
DIC=TRUE,
working.directory=NULL,
jags.seed = 123,
refresh = 5000,
progress.bar = "none", digits=5
)
jfit$BUGSoutput$summary
aze<-jfit$BUGSoutput$summary[c(3,5,7,8),1]
res[i,]<-aze  # ß ICI , ça rentre pas !
}
return(res)
}
library(doParallel)
detectCores() #12
simIt <- function(simul=1000, N=100 ){
res<-matrix(NA,ncol=4,nrow=simul)
#N=100 # à faire varier pour trouver la "puissance"
for(i in 1:simul){
# cat("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","\n")
# cat("Simulation N° ",i,"\n")
# cat("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","\n")
r<-c(sum(rbetabinom.ab(N,1,85,15)),
sum(rbetabinom.ab(N,1,90,10)),
sum(rbetabinom.ab(N,1,91,9)),
sum(rbetabinom.ab(N,1,92,8)))
# inits
valin<-function(){list("p"=rep(0.9,4))}
jfit<-jags(data=list("r","N"),
inits=valin,
parameters.to.save = prmtr,
model.file=quatprop,
n.chains=1,
n.iter=55000,
n.burnin=5000,
n.thin=1,
DIC=TRUE,
working.directory=NULL,
jags.seed = 123,
refresh = 5000,
progress.bar = "none", digits=5
)
jfit$BUGSoutput$summary
aze<-jfit$BUGSoutput$summary[c(3,5,7,8),1]
res[i,]<-aze  # ß ICI , ça rentre pas !
}
return(res)
}
library(doParallel)
registerDoParallel(cores=detectCores() -1)
system.time(
res <- foreach(i=1:10) %dopar% simIt(simul = 100, N = 450)
)
library(VGAM)
simIt <- function(simul=1000, N=100 ){
res<-matrix(NA,ncol=4,nrow=simul)
#N=100 # à faire varier pour trouver la "puissance"
for(i in 1:simul){
# cat("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","\n")
# cat("Simulation N° ",i,"\n")
# cat("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","\n")
r<-c(sum(rbetabinom.ab(N,1,85,15)),
sum(rbetabinom.ab(N,1,90,10)),
sum(rbetabinom.ab(N,1,91,9)),
sum(rbetabinom.ab(N,1,92,8)))
# inits
valin<-function(){list("p"=rep(0.9,4))}
jfit<-jags(data=list("r","N"),
inits=valin,
parameters.to.save = prmtr,
model.file=quatprop,
n.chains=1,
n.iter=55000,
n.burnin=5000,
n.thin=1,
DIC=TRUE,
working.directory=NULL,
jags.seed = 123,
refresh = 5000,
progress.bar = "none", digits=5
)
jfit$BUGSoutput$summary
aze<-jfit$BUGSoutput$summary[c(3,5,7,8),1]
res[i,]<-aze  # ß ICI , ça rentre pas !
}
return(res)
}
library(doParallel)
registerDoParallel(cores=detectCores() -1)
system.time(
res <- foreach(i=1:10) %dopar% simIt(simul = 100, N = 450)
)
?foreach
res <- foreach(i=1:10,.packages = c("VGAM","R2jags")) %dopar% simIt(simul = 100, N = 450)
res
for(i in 1:4){
print(rownames(jfit$BUGSoutput$summary[c(3,5,7,8),])[i])
print(sum(unlist(lapply(res, FUN = function(x){sum(x[,i]>0.95)}))))
}
for(i in 1:4){
print(rownames(jfit$BUGSoutput$summary[c(3,5,7,8),])[i])
print(sum(unlist(lapply(res, FUN = function(x){sum(x[,i]>0.95)}))))
}
library(VGAM)
library(rjags)
library(R2jags)
quatprop<-function(){
for(i in 1:4){
r[i]~dbin(p[i],N)
}
# priors :
p[1]~dbeta(8.5,1.5) # prior pas trop fort
for(j in 2:4){p[j]~dbeta(alpha,beta) }  # pareil pas trop fort mais hyperprior quand même
alpha~dnorm(9.1,17777) # précision de la mort pour avoir un alpha puis un p entre 89,5 et 92,5
beta~dnorm(1.1,17777) # idem
diff21<-p[2]-p[1] # écart avec le placebo
diff31<-p[3]-p[1] # écart avec le placebo
diff41<-p[4]-p[1] # écart avec le placebo
diff21sup0<- step(diff21)
diff31sup0<- step(diff31)
diff41sup0<- step(diff41)
pglobal<-(p[2]+p[3]+p[4])/3
diffglobal1<-pglobal-p[1] # écart avec le placebo
diffglobal1sup0<- step(diffglobal1)
}
prmtr<-c("p","diff21","diff31","diff41","diff21sup0","diff31sup0","diff41sup0","diffglobal1sup0","pglobal")
# Data
simul=1000
res<-matrix(NA,ncol=4,nrow=simul)
N=450 # à faire varier pour trouver la "puissance"
for(i in 1:simul){
cat("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","\n")
cat("Simulation N° ",i,"\n")
cat("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","\n")
r<-c(sum(rbetabinom.ab(N,1,85,15)),
sum(rbetabinom.ab(N,1,90,10)),
sum(rbetabinom.ab(N,1,91,9)),
sum(rbetabinom.ab(N,1,92,8)))
# inits
valin<-function(){list("p"=rep(0.9,4))}
jfit<-jags(data=list("r","N"),
inits=valin,
parameters.to.save = prmtr,
model.file=quatprop,
n.chains=1,
n.iter=55000,
n.burnin=5000,
n.thin=1,
DIC=TRUE,
working.directory=NULL,
jags.seed = 123,
refresh = 5000,
progress.bar = "none", digits=5
)
jfit$BUGSoutput$summary
aze<-jfit$BUGSoutput$summary[c(3,5,7,8),1]
res[i,]<-aze
}
sum(res[,1]>0.95)
sum(res[,2]>0.95)
sum(res[,3]>0.95)
sum(res[,4]>0.95)
for(i in 1:4){
print(rownames(jfit$BUGSoutput$summary[c(3,5,7,8),])[i])
print(sum(unlist(lapply(res, FUN = function(x){sum(x[,i]>0.95)}))))
}
View(arrondi)
View(arrondi)
##############################################################
# comparaison via JAGS avec prior hiérarchique
#
##############################################################
library(VGAM)
library(rjags)
library(R2jags)
quatprop<-function(){
for(i in 1:4){
r[i]~dbin(p[i],N)
}
# priors :
p[1]~dbeta(8.5,1.5) # prior pas trop fort
for(j in 2:4){p[j]~dbeta(alpha,beta) }  # pareil pas trop fort mais hyperprior quand même
alpha~dnorm(9.1,17777) # précision de la mort pour avoir un alpha puis un p entre 89,5 et 92,5
beta~dnorm(1.1,17777) # idem
diff21<-p[2]-p[1] # écart avec le placebo
diff31<-p[3]-p[1] # écart avec le placebo
diff41<-p[4]-p[1] # écart avec le placebo
diff21sup0<- step(diff21)
diff31sup0<- step(diff31)
diff41sup0<- step(diff41)
pglobal<-(p[2]+p[3]+p[4])/3
diffglobal1<-pglobal-p[1] # écart avec le placebo
diffglobal1sup0<- step(diffglobal1)
}
prmtr<-c("p","diff21","diff31","diff41","diff21sup0","diff31sup0","diff41sup0","diffglobal1","diffglobal1sup0")
simIt <- function(simul=1000, N=100 ){
res<-matrix(NA,ncol=4,nrow=simul)
N=450 # à faire varier pour trouver la "puissance"
for(i in 1:simul){
# cat("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","\n")
# cat("Simulation N° ",i,"\n")
# cat("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","\n")
r<-c(sum(rbetabinom.ab(N,1,85,15)),
sum(rbetabinom.ab(N,1,90,10)),
sum(rbetabinom.ab(N,1,91,9)),
sum(rbetabinom.ab(N,1,92,8)))
# inits
valin<-function(){list("p"=rep(0.9,4))}
jfit<-jags(data=list("r","N"),
inits=valin,
parameters.to.save = prmtr,
model.file=quatprop,
n.chains=1,
n.iter=55000,
n.burnin=5000,
n.thin=1,
DIC=TRUE,
working.directory=NULL,
jags.seed = 123,
refresh = 5000,
progress.bar = "none", digits=5
)
jfit$BUGSoutput$summary
aze<-jfit$BUGSoutput$summary[c(3,5,7,9),1]
res[i,]<-aze  # ß ICI , ça rentre pas !
}
return(res)
}
library(doParallel)
detectCores() #12
registerDoParallel(cores=(detectCores()-2))
res <- foreach(i=1:10) %dopar% simIt(simul = 100, N = 400)
for(i in 1:4){
print(rownames(jfit$BUGSoutput$summary[c(3,5,7,9),])[i])
print(sum(unlist(lapply(res, FUN = function(x){sum(x[,i]>0.95)}))))
}
J
##############################################################
# comparaison via JAGS avec prior hiérarchique
#
##############################################################
library(VGAM)
library(rjags)
library(R2jags)
quatprop<-function(){
for(i in 1:4){
r[i]~dbin(p[i],N)
}
# priors :
p[1]~dbeta(8.5,1.5) # prior pas trop fort
for(j in 2:4){p[j]~dbeta(alpha,beta) }  # pareil pas trop fort mais hyperprior quand même
alpha~dnorm(9.1,17777) # précision de la mort pour avoir un alpha puis un p entre 89,5 et 92,5
beta~dnorm(1.1,17777) # idem
diff21<-p[2]-p[1] # écart avec le placebo
diff31<-p[3]-p[1] # écart avec le placebo
diff41<-p[4]-p[1] # écart avec le placebo
diff21sup0<- step(diff21)
diff31sup0<- step(diff31)
diff41sup0<- step(diff41)
pglobal<-(p[2]+p[3]+p[4])/3
diffglobal1<-pglobal-p[1] # écart avec le placebo
diffglobal1sup0<- step(diffglobal1)
}
prmtr<-c("p","diff21","diff31","diff41","diff21sup0","diff31sup0","diff41sup0","diffglobal1","diffglobal1sup0")
simIt <- function(simul=1000, N=100 ){
res<-matrix(NA,ncol=4,nrow=simul)
N=450 # à faire varier pour trouver la "puissance"
for(i in 1:simul){
# cat("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","\n")
# cat("Simulation N° ",i,"\n")
# cat("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","\n")
r<-c(sum(rbetabinom.ab(N,1,85,15)),
sum(rbetabinom.ab(N,1,90,10)),
sum(rbetabinom.ab(N,1,91,9)),
sum(rbetabinom.ab(N,1,92,8)))
# inits
valin<-function(){list("p"=rep(0.9,4))}
jfit<-jags(data=list("r","N"),
inits=valin,
parameters.to.save = prmtr,
model.file=quatprop,
n.chains=1,
n.iter=55000,
n.burnin=5000,
n.thin=1,
DIC=TRUE,
working.directory=NULL,
jags.seed = 123,
refresh = 5000,
progress.bar = "none", digits=5
)
jfit$BUGSoutput$summary
aze<-jfit$BUGSoutput$summary[c(3,5,7,9),1]
res[i,]<-aze  # ß ICI , ça rentre pas !
}
return(res)
}
library(doParallel)
detectCores() #12
registerDoParallel(cores=(detectCores()-2))
res <- foreach(i=1:10,.packages = c("VGAM","R2jags")) %dopar% simIt(simul = 100, N = N)
for(i in 1:4){
print(rownames(jfit$BUGSoutput$summary[c(3,5,7,9),])[i])
print(sum(unlist(lapply(res, FUN = function(x){sum(x[,i]>0.95)}))))
}
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
rsconnect::setAccountInfo(name='thibautfabacher',
token='6A29ED2C15359205875F58D10A65D0F0',
secret='tLukCPsccg2EbFHKzPyT74ZBa9+jAx4qwDLkRuPd')
rsconnect::deployApp()
runApp()
runApp()
runApp()
runApp()
runApp()
rsconnect::deployApp()
URL <- getURL("https://raw.githubusercontent.com/opencovid19-fr/data/master/dist/chiffres-cles.csv")
library(shiny)
library(leaflet)
library(RColorBrewer)
library(rgdal)
library(RCurl)
library(plotly)
library(viridis)
library(tidyverse)
variable <-F
URL <- getURL("https://raw.githubusercontent.com/opencovid19-fr/data/master/dist/chiffres-cles.csv")
data <- read.csv(text = URL, check.names = F)
str(data)
sum(duplicated(data%>%select(date,maille_nom)))
data$granularite
table(data$granularite)
data <- read.csv(text = URL, check.names = F,stringsAsFactors = F)
data<- data%>%filter(granularite == "departement")
sum(duplicated(data%>%select(date,maille_nom)))
dim(data)
which(duplicated(data%>%select(date,maille_nom)))
data[347:348,]
data<- data%>%filter(granularite == "departement")%>%select(- source_nom)
sum(duplicated(data%>%select(date,maille_nom)))
data<- unique(data)
data
sum(duplicated(data%>%select(date,maille_nom)))
data[347:348,]
data<- data%>%filter(granularite == "departement")%>%select(- source_nom,source_url)
URL <- getURL("https://raw.githubusercontent.com/opencovid19-fr/data/master/dist/chiffres-cles.csv")
data <- read.csv(text = URL, check.names = F,stringsAsFactors = F)
data<- data%>%filter(granularite == "departement")%>%select(- source_nom,-source_url)
data<- unique(data)
sum(duplicated(data%>%select(date,maille_nom)))
which(duplicated(data%>%select(date,maille_nom)))
data[356:3578,]
data[356:357,]
which(duplicated(data%>%select(date,maille_nom)))
data[372:373,]
data[592:593,]
data[592:591,]
data%>%group_by(date, maille_code)%>%summarise(cas_confirmes = max(cas_confirmes, na.rm = T), deces = max(deces, na.rm = T))
data%>%select(maille_code=="DEP-16")
data%>%filer(maille_code=="DEP-16")
data%>%filter(maille_code=="DEP-16")
data[is.na(data)]<-0
data%>%group_by(date, maille_code)%>%summarise(cas_confirmes = max(cas_confirmes, na.rm = T), deces = max(deces, na.rm = T))
data%>%group_by(date, maille_code)%>%summarise(cas_confirmes = max(cas_confirmes), deces = max(deces))
data<- data%>%group_by(date, maille_code)%>%summarise(cas_confirmes = max(cas_confirmes), deces = max(deces))
library(shiny)
library(leaflet)
library(RColorBrewer)
library(rgdal)
library(RCurl)
library(plotly)
library(viridis)
library(tidyverse)
variable <-F
URL <- getURL("https://raw.githubusercontent.com/opencovid19-fr/data/master/dist/chiffres-cles.csv")
data <- read.csv(text = URL, check.names = F,stringsAsFactors = F)
data<- data%>%filter(granularite == "departement")%>%select(- source_nom,-source_url,-granularite)
data<- unique(data)
data[is.na(data)]<-0
data<- data%>%group_by(date, maille_code)%>%summarise(cas_confirmes = max(cas_confirmes), deces = max(deces))
str(data)
data$date<- as.Date(data$date, "%Y-%m-%d")
data$date
data<- data %>%group_by(maille_code)%>%
mutate(cumsumdeath = cumsum(deces))
data%>%filter(maille_code=="DEP67")
data$maille_code
data%>%filter(maille_code=="DEP-67")
library(psych)
ICC(anxiety)
install.packages("psych")
library(psych)
ICC(anxiety)
library("irr")
install.packages("irr")
library(psych)
ICC(anxiety)
data("anxiety", package = "irr")
anxiety
install.packages("ICC.Sample.Size")
?ICC.Sample.Size::calculateIccSampleSize()
ICC.Sample.Size::calculateIccSampleSize()
ICC.Sample.Size::calculateIccSampleSize(P0 = 0.5)
ICC.Sample.Size::calculateIccSampleSize(p0 = 0.5)
ICC.Sample.Size::calculateIccSampleSize(p=O.5,p0 = 0.5)
ICC.Sample.Size::calculateIccSampleSize(p=0.5,p0 = 0.5)
ICC.Sample.Size::calculateIccSampleSize(p=0.5,p0 = 0.05)
ICC.Sample.Size::calculateIccSampleSize(p=0.05,p0 = 0.05)
ICC.Sample.Size::calculateIccSampleSize(p=0.5,p0 = 0.05)
ICC.Sample.Size::calculateIccSampleSize(p=5,p0 = 0.05)
ICC.Sample.Size::calculateIccSampleSize(p=0.7,p0 = 0.05)
ICC.Sample.Size::calculateIccSampleSize(p=0.9,p0 = 0.05)
ICC.Sample.Size::calculateIccSampleSize(p=0.01,p0 = 0.05)
ICC.Sample.Size::calculateIccSampleSize(p=0.05,p0 = 0.05)
ICC.Sample.Size::calculateIccSampleSize(p=0.06,p0 = 0.05)
ICC.Sample.Size::calculateIccSampleSize(p=0.15,p0 = 0.05)
ICC.Sample.Size::calculateIccSampleSize(p=0.35,p0 = 0.05)
ICC.Sample.Size::calculateIccSampleSize(p=0.35,p0 = 0.05)
ICC.Sample.Size::calculateIccSampleSize(p=0.35,p0 = 0.0)
ICC.Sample.Size::calculateIccSampleSize(p0 = 0.0, by='p')
ICC.Sample.Size::calculateIccSampleSize(p0 = 0.0, by='p', k =1)
ICC.Sample.Size::calculateIccSampleSize(p0 = 0.0, by='p', k =3)
ICC.Sample.Size::calculateIccSampleSize(p0 = 0.0, by='p', k =4)
