df_click<- df_click%>%pivot_longer(cols = -c(Pays,Pop),
values_to = "Cases",names_to = "Date")%>%
mutate(Date= lubridate::parse_date_time(Date, orders = c("mdy")))
if( input$variable=="New cases over period/population"){
plotlyProxy("evol", session) %>%
plotlyProxyInvoke("addTraces",
list(x =df_click$Date ,
name =country_Click ,
y = df_click$Cases/df_click$Pop*100000,
type = 'scatter',
mode = 'lines'))
}else{
plotlyProxy("evol", session) %>%
plotlyProxyInvoke("addTraces",
list(x =df_click$Date ,
name =country_Click ,
y = df_click$Cases,
type = 'scatter',
mode = 'lines'))
}
}
}
})
output$Credits <- renderUI({
if (input$credits) {
tagList(
absolutePanel(
id = "name",
class = "panel panel-credits",
top = "45%",
left  = "45%",
HTML(
"<h1> Data Source : </h1>
<p> <li><a href='https://coronavirus.jhu.edu/map.html'>Coronavirus COVID-19 Global Cases map Johns Hopkins University</a></li>
<li>COVID-19 Cases : <a href='https://github.com/CSSEGISandData/COVID-19' target='_blank'>Github Johns Hopkins University</a></li>
<li>World population : <a href='https://en.wikipedia.org/wiki/List_of_countries_and_dependencies_by_population' target='_blank'>Wikipedia</a></li>
<li>Shapefile : <a href='https://www.naturalearthdata.com/downloads/50m-cultural-vectors/50m-admin-0-countries-2/' target='_blank'>Natural Earth Data</a></li>
<li> <a href ='https://github.com/DrFabach/Corona' target='_blank'>Code on Github </a></li>
<li> <a href = 'https://www.r-project.org/'  target='_blank'>The R Project for Statistical Computing</a></li>
<li> <a href = 'https://shiny.rstudio.com/' target='_blank'>Shiny R package</a></li>
<li> <a href = 'https://leafletjs.com/' target='_blank'>Leaflet </a></li>
</p>"
),
draggable = T
)
)
}
})
}
shinyApp(ui, server)
rsconnect::setAccountInfo(name='thibautfabacher',
token='6A29ED2C15359205875F58D10A65D0F0',
secret='tLukCPsccg2EbFHKzPyT74ZBa9+jAx4qwDLkRuPd')
rsconnect::deployApp()
runApp()
runApp(".")
rsconnect::deployApp(".")
rsconnect::deployApp(".")
rsconnect::deployApp(".")
runApp()
runApp()
rsconnect::deployApp(".")
library(VGAM)
library(rjags)
library(R2jags)
quatprop<-function(){
for(i in 1:4){
r[i]~dbin(p[i],N)
}
# priors :
p[1]~dbeta(9,10) # prior pas trop fort
for(j in 2:4){p[j]~dbeta(alpha,beta) }  # pareil pas trop fort mais hyperprior quand même
alpha~dnorm(9.1,17777) # précision de la mort pour avoir un alpha puis un p entre 89,5 et 92,5
beta~dnorm(1.1,17777) # idem
diff21<-p[2]-p[1] # écart avec le placebo
diff31<-p[3]-p[1] # écart avec le placebo
diff41<-p[4]-p[1] # écart avec le placebo
diff21sup0<- step(diff21)
diff31sup0<- step(diff31)
diff41sup0<- step(diff41)
pglobal<-(p[2]+p[3]+p[4])/3
diffglobal1<-pglobal-p[1] # écart avec le placebo
diffglobal1sup0<- step(diffglobal1)
}
prmtr<-c("p","diff21","diff31","diff41","diff21sup0","diff31sup0","diff41sup0","diffglobal1sup0","pglobal")
# Data
simul=1000
res<-matrix(NA,ncol=4,nrow=simul)
N=450 # à faire varier pour trouver la "puissance"
for(i in 1:simul){
cat("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","\n")
cat("Simulation N° ",i,"\n")
cat("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","\n")
r<-c(sum(rbetabinom.ab(N,1,85,15)),
sum(rbetabinom.ab(N,1,90,10)),
sum(rbetabinom.ab(N,1,91,9)),
sum(rbetabinom.ab(N,1,92,8)))
# inits
valin<-function(){list("p"=rep(0.9,4))}
jfit<-jags(data=list("r","N"),
inits=valin,
parameters.to.save = prmtr,
model.file=quatprop,
n.chains=1,
n.iter=55000,
n.burnin=5000,
n.thin=1,
DIC=TRUE,
working.directory=NULL,
jags.seed = 123,
refresh = 5000,
progress.bar = "none", digits=5
)
jfit$BUGSoutput$summary
aze<-jfit$BUGSoutput$summary[c(3,5,7,8),1]
res[i,]<-aze
}
sum(res[,1]>0.95)
sum(res[,2]>0.95)
sum(res[,3]>0.95)
sum(res[,4]>0.95)
simIt <- function(simul=1000, N=100 ){
res<-matrix(NA,ncol=4,nrow=simul)
#N=100 # à faire varier pour trouver la "puissance"
for(i in 1:simul){
# cat("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","\n")
# cat("Simulation N° ",i,"\n")
# cat("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","\n")
r<-c(sum(rbetabinom.ab(N,1,85,15)),
sum(rbetabinom.ab(N,1,90,10)),
sum(rbetabinom.ab(N,1,91,9)),
sum(rbetabinom.ab(N,1,92,8)))
# inits
valin<-function(){list("p"=rep(0.9,4))}
jfit<-jags(data=list("r","N"),
inits=valin,
parameters.to.save = prmtr,
model.file=quatprop,
n.chains=1,
n.iter=55000,
n.burnin=5000,
n.thin=1,
DIC=TRUE,
working.directory=NULL,
jags.seed = 123,
refresh = 5000,
progress.bar = "none", digits=5
)
jfit$BUGSoutput$summary
aze<-jfit$BUGSoutput$summary[c(3,5,7,8),1]
res[i,]<-aze  # ß ICI , ça rentre pas !
}
return(res)
}
library(doParallel)
detectCores() #12
simIt <- function(simul=1000, N=100 ){
res<-matrix(NA,ncol=4,nrow=simul)
#N=100 # à faire varier pour trouver la "puissance"
for(i in 1:simul){
# cat("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","\n")
# cat("Simulation N° ",i,"\n")
# cat("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","\n")
r<-c(sum(rbetabinom.ab(N,1,85,15)),
sum(rbetabinom.ab(N,1,90,10)),
sum(rbetabinom.ab(N,1,91,9)),
sum(rbetabinom.ab(N,1,92,8)))
# inits
valin<-function(){list("p"=rep(0.9,4))}
jfit<-jags(data=list("r","N"),
inits=valin,
parameters.to.save = prmtr,
model.file=quatprop,
n.chains=1,
n.iter=55000,
n.burnin=5000,
n.thin=1,
DIC=TRUE,
working.directory=NULL,
jags.seed = 123,
refresh = 5000,
progress.bar = "none", digits=5
)
jfit$BUGSoutput$summary
aze<-jfit$BUGSoutput$summary[c(3,5,7,8),1]
res[i,]<-aze  # ß ICI , ça rentre pas !
}
return(res)
}
library(doParallel)
registerDoParallel(cores=detectCores() -1)
system.time(
res <- foreach(i=1:10) %dopar% simIt(simul = 100, N = 450)
)
library(VGAM)
simIt <- function(simul=1000, N=100 ){
res<-matrix(NA,ncol=4,nrow=simul)
#N=100 # à faire varier pour trouver la "puissance"
for(i in 1:simul){
# cat("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","\n")
# cat("Simulation N° ",i,"\n")
# cat("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","\n")
r<-c(sum(rbetabinom.ab(N,1,85,15)),
sum(rbetabinom.ab(N,1,90,10)),
sum(rbetabinom.ab(N,1,91,9)),
sum(rbetabinom.ab(N,1,92,8)))
# inits
valin<-function(){list("p"=rep(0.9,4))}
jfit<-jags(data=list("r","N"),
inits=valin,
parameters.to.save = prmtr,
model.file=quatprop,
n.chains=1,
n.iter=55000,
n.burnin=5000,
n.thin=1,
DIC=TRUE,
working.directory=NULL,
jags.seed = 123,
refresh = 5000,
progress.bar = "none", digits=5
)
jfit$BUGSoutput$summary
aze<-jfit$BUGSoutput$summary[c(3,5,7,8),1]
res[i,]<-aze  # ß ICI , ça rentre pas !
}
return(res)
}
library(doParallel)
registerDoParallel(cores=detectCores() -1)
system.time(
res <- foreach(i=1:10) %dopar% simIt(simul = 100, N = 450)
)
?foreach
res <- foreach(i=1:10,.packages = c("VGAM","R2jags")) %dopar% simIt(simul = 100, N = 450)
res
for(i in 1:4){
print(rownames(jfit$BUGSoutput$summary[c(3,5,7,8),])[i])
print(sum(unlist(lapply(res, FUN = function(x){sum(x[,i]>0.95)}))))
}
for(i in 1:4){
print(rownames(jfit$BUGSoutput$summary[c(3,5,7,8),])[i])
print(sum(unlist(lapply(res, FUN = function(x){sum(x[,i]>0.95)}))))
}
library(VGAM)
library(rjags)
library(R2jags)
quatprop<-function(){
for(i in 1:4){
r[i]~dbin(p[i],N)
}
# priors :
p[1]~dbeta(8.5,1.5) # prior pas trop fort
for(j in 2:4){p[j]~dbeta(alpha,beta) }  # pareil pas trop fort mais hyperprior quand même
alpha~dnorm(9.1,17777) # précision de la mort pour avoir un alpha puis un p entre 89,5 et 92,5
beta~dnorm(1.1,17777) # idem
diff21<-p[2]-p[1] # écart avec le placebo
diff31<-p[3]-p[1] # écart avec le placebo
diff41<-p[4]-p[1] # écart avec le placebo
diff21sup0<- step(diff21)
diff31sup0<- step(diff31)
diff41sup0<- step(diff41)
pglobal<-(p[2]+p[3]+p[4])/3
diffglobal1<-pglobal-p[1] # écart avec le placebo
diffglobal1sup0<- step(diffglobal1)
}
prmtr<-c("p","diff21","diff31","diff41","diff21sup0","diff31sup0","diff41sup0","diffglobal1sup0","pglobal")
# Data
simul=1000
res<-matrix(NA,ncol=4,nrow=simul)
N=450 # à faire varier pour trouver la "puissance"
for(i in 1:simul){
cat("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","\n")
cat("Simulation N° ",i,"\n")
cat("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","\n")
r<-c(sum(rbetabinom.ab(N,1,85,15)),
sum(rbetabinom.ab(N,1,90,10)),
sum(rbetabinom.ab(N,1,91,9)),
sum(rbetabinom.ab(N,1,92,8)))
# inits
valin<-function(){list("p"=rep(0.9,4))}
jfit<-jags(data=list("r","N"),
inits=valin,
parameters.to.save = prmtr,
model.file=quatprop,
n.chains=1,
n.iter=55000,
n.burnin=5000,
n.thin=1,
DIC=TRUE,
working.directory=NULL,
jags.seed = 123,
refresh = 5000,
progress.bar = "none", digits=5
)
jfit$BUGSoutput$summary
aze<-jfit$BUGSoutput$summary[c(3,5,7,8),1]
res[i,]<-aze
}
sum(res[,1]>0.95)
sum(res[,2]>0.95)
sum(res[,3]>0.95)
sum(res[,4]>0.95)
for(i in 1:4){
print(rownames(jfit$BUGSoutput$summary[c(3,5,7,8),])[i])
print(sum(unlist(lapply(res, FUN = function(x){sum(x[,i]>0.95)}))))
}
View(arrondi)
View(arrondi)
##############################################################
# comparaison via JAGS avec prior hiérarchique
#
##############################################################
library(VGAM)
library(rjags)
library(R2jags)
quatprop<-function(){
for(i in 1:4){
r[i]~dbin(p[i],N)
}
# priors :
p[1]~dbeta(8.5,1.5) # prior pas trop fort
for(j in 2:4){p[j]~dbeta(alpha,beta) }  # pareil pas trop fort mais hyperprior quand même
alpha~dnorm(9.1,17777) # précision de la mort pour avoir un alpha puis un p entre 89,5 et 92,5
beta~dnorm(1.1,17777) # idem
diff21<-p[2]-p[1] # écart avec le placebo
diff31<-p[3]-p[1] # écart avec le placebo
diff41<-p[4]-p[1] # écart avec le placebo
diff21sup0<- step(diff21)
diff31sup0<- step(diff31)
diff41sup0<- step(diff41)
pglobal<-(p[2]+p[3]+p[4])/3
diffglobal1<-pglobal-p[1] # écart avec le placebo
diffglobal1sup0<- step(diffglobal1)
}
prmtr<-c("p","diff21","diff31","diff41","diff21sup0","diff31sup0","diff41sup0","diffglobal1","diffglobal1sup0")
simIt <- function(simul=1000, N=100 ){
res<-matrix(NA,ncol=4,nrow=simul)
N=450 # à faire varier pour trouver la "puissance"
for(i in 1:simul){
# cat("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","\n")
# cat("Simulation N° ",i,"\n")
# cat("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","\n")
r<-c(sum(rbetabinom.ab(N,1,85,15)),
sum(rbetabinom.ab(N,1,90,10)),
sum(rbetabinom.ab(N,1,91,9)),
sum(rbetabinom.ab(N,1,92,8)))
# inits
valin<-function(){list("p"=rep(0.9,4))}
jfit<-jags(data=list("r","N"),
inits=valin,
parameters.to.save = prmtr,
model.file=quatprop,
n.chains=1,
n.iter=55000,
n.burnin=5000,
n.thin=1,
DIC=TRUE,
working.directory=NULL,
jags.seed = 123,
refresh = 5000,
progress.bar = "none", digits=5
)
jfit$BUGSoutput$summary
aze<-jfit$BUGSoutput$summary[c(3,5,7,9),1]
res[i,]<-aze  # ß ICI , ça rentre pas !
}
return(res)
}
library(doParallel)
detectCores() #12
registerDoParallel(cores=(detectCores()-2))
res <- foreach(i=1:10) %dopar% simIt(simul = 100, N = 400)
for(i in 1:4){
print(rownames(jfit$BUGSoutput$summary[c(3,5,7,9),])[i])
print(sum(unlist(lapply(res, FUN = function(x){sum(x[,i]>0.95)}))))
}
J
##############################################################
# comparaison via JAGS avec prior hiérarchique
#
##############################################################
library(VGAM)
library(rjags)
library(R2jags)
quatprop<-function(){
for(i in 1:4){
r[i]~dbin(p[i],N)
}
# priors :
p[1]~dbeta(8.5,1.5) # prior pas trop fort
for(j in 2:4){p[j]~dbeta(alpha,beta) }  # pareil pas trop fort mais hyperprior quand même
alpha~dnorm(9.1,17777) # précision de la mort pour avoir un alpha puis un p entre 89,5 et 92,5
beta~dnorm(1.1,17777) # idem
diff21<-p[2]-p[1] # écart avec le placebo
diff31<-p[3]-p[1] # écart avec le placebo
diff41<-p[4]-p[1] # écart avec le placebo
diff21sup0<- step(diff21)
diff31sup0<- step(diff31)
diff41sup0<- step(diff41)
pglobal<-(p[2]+p[3]+p[4])/3
diffglobal1<-pglobal-p[1] # écart avec le placebo
diffglobal1sup0<- step(diffglobal1)
}
prmtr<-c("p","diff21","diff31","diff41","diff21sup0","diff31sup0","diff41sup0","diffglobal1","diffglobal1sup0")
simIt <- function(simul=1000, N=100 ){
res<-matrix(NA,ncol=4,nrow=simul)
N=450 # à faire varier pour trouver la "puissance"
for(i in 1:simul){
# cat("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","\n")
# cat("Simulation N° ",i,"\n")
# cat("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","\n")
r<-c(sum(rbetabinom.ab(N,1,85,15)),
sum(rbetabinom.ab(N,1,90,10)),
sum(rbetabinom.ab(N,1,91,9)),
sum(rbetabinom.ab(N,1,92,8)))
# inits
valin<-function(){list("p"=rep(0.9,4))}
jfit<-jags(data=list("r","N"),
inits=valin,
parameters.to.save = prmtr,
model.file=quatprop,
n.chains=1,
n.iter=55000,
n.burnin=5000,
n.thin=1,
DIC=TRUE,
working.directory=NULL,
jags.seed = 123,
refresh = 5000,
progress.bar = "none", digits=5
)
jfit$BUGSoutput$summary
aze<-jfit$BUGSoutput$summary[c(3,5,7,9),1]
res[i,]<-aze  # ß ICI , ça rentre pas !
}
return(res)
}
library(doParallel)
detectCores() #12
registerDoParallel(cores=(detectCores()-2))
res <- foreach(i=1:10,.packages = c("VGAM","R2jags")) %dopar% simIt(simul = 100, N = N)
for(i in 1:4){
print(rownames(jfit$BUGSoutput$summary[c(3,5,7,9),])[i])
print(sum(unlist(lapply(res, FUN = function(x){sum(x[,i]>0.95)}))))
}
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
rsconnect::setAccountInfo(name='thibautfabacher',
token='6A29ED2C15359205875F58D10A65D0F0',
secret='tLukCPsccg2EbFHKzPyT74ZBa9+jAx4qwDLkRuPd')
rsconnect::deployApp()
runApp()
runApp()
runApp()
runApp()
runApp()
rsconnect::deployApp()
URL <- getURL("https://raw.githubusercontent.com/opencovid19-fr/data/master/dist/chiffres-cles.csv")
library(shiny)
library(leaflet)
library(RColorBrewer)
library(rgdal)
library(RCurl)
library(plotly)
library(viridis)
library(tidyverse)
variable <-F
URL <- getURL("https://raw.githubusercontent.com/opencovid19-fr/data/master/dist/chiffres-cles.csv")
data <- read.csv(text = URL, check.names = F)
str(data)
sum(duplicated(data%>%select(date,maille_nom)))
data$granularite
table(data$granularite)
data <- read.csv(text = URL, check.names = F,stringsAsFactors = F)
data<- data%>%filter(granularite == "departement")
sum(duplicated(data%>%select(date,maille_nom)))
dim(data)
which(duplicated(data%>%select(date,maille_nom)))
data[347:348,]
data<- data%>%filter(granularite == "departement")%>%select(- source_nom)
sum(duplicated(data%>%select(date,maille_nom)))
data<- unique(data)
data
sum(duplicated(data%>%select(date,maille_nom)))
data[347:348,]
data<- data%>%filter(granularite == "departement")%>%select(- source_nom,source_url)
URL <- getURL("https://raw.githubusercontent.com/opencovid19-fr/data/master/dist/chiffres-cles.csv")
data <- read.csv(text = URL, check.names = F,stringsAsFactors = F)
data<- data%>%filter(granularite == "departement")%>%select(- source_nom,-source_url)
data<- unique(data)
sum(duplicated(data%>%select(date,maille_nom)))
which(duplicated(data%>%select(date,maille_nom)))
data[356:3578,]
data[356:357,]
which(duplicated(data%>%select(date,maille_nom)))
data[372:373,]
data[592:593,]
data[592:591,]
data%>%group_by(date, maille_code)%>%summarise(cas_confirmes = max(cas_confirmes, na.rm = T), deces = max(deces, na.rm = T))
data%>%select(maille_code=="DEP-16")
data%>%filer(maille_code=="DEP-16")
data%>%filter(maille_code=="DEP-16")
data[is.na(data)]<-0
data%>%group_by(date, maille_code)%>%summarise(cas_confirmes = max(cas_confirmes, na.rm = T), deces = max(deces, na.rm = T))
data%>%group_by(date, maille_code)%>%summarise(cas_confirmes = max(cas_confirmes), deces = max(deces))
data<- data%>%group_by(date, maille_code)%>%summarise(cas_confirmes = max(cas_confirmes), deces = max(deces))
